// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  id String @id @default(uuid())
  firstName String?
  lastName String?
  email String @unique
  phone String @unique
  username String @unique
  password String

  bookings Booking[]
  payments Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Homestay {
  id String @id @default(uuid())
  name String
  description String?
  coordinates Unsupported("geometry(Point, 4326)")
  pricePerNight Float

  bookings Booking[]
  homeAvailables HomeAvailable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([coordinates], name: "location_idx")
}

model Booking {
  id String @id @default(uuid())
  checkInDate DateTime
  checkOutDate DateTime
  totalPrice Float
  userId String
  homestayId String

  user User @relation(fields: [userId], references: [id])
  homestay Homestay @relation(fields: [homestayId], references: [id])

  payment Payment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Payment {
  id String @id @default(uuid())
  amount Float
  status Boolean
  userId String
  bookingId String @unique

  user User @relation(fields: [userId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Transaction {
  id String @id @default(uuid())
  amount Float
  status Boolean
  paymentId String

  payment Payment @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model HomeAvailable {
  id String @id @default(uuid())
  availableFrom DateTime
  availableTo DateTime
  homestayId String

  homestay Homestay @relation(fields: [homestayId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}